buildscript {

	logger.lifecycle('--------------------------') 
	logger.lifecycle('BUILDSCRIPT START') 
	logger.lifecycle('--------------------------') 

	//forge, maven and sonatype repos
	repositories {
		
		//mavenCentral()
		//Due to support changes, mavencentral no longer works. We can use the full URL instead. 
		//not great safety wise, but this is for a private server. fuck it. 
		
		logger.lifecycle('Begin buildscript repos...') 
		logger.lifecycle('we should see 3 get added') 
		maven {

			logger.lifecycle('MavenCentral Repo adding...')
			name = "mavenCentral"
			url = "http://insecure.repo1.maven.org/maven2/"
			logger.lifecycle('MavenCentral Repo added!')
		
		}

        maven {
			
			logger.lifecycle('Forge Repo adding...')
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
			logger.lifecycle('Forge Repo Added!')
        
		}

        maven {
			
        	logger.lifecycle('Sonatype repo adding...')    		
			name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
			logger.lifecycle('Sonatype Repo added!') 
        
		}
    }
	
	//associated dependencies
	logger.lifecycle('Begin buildscript dependencies...') 
	logger.lifecycle('We should see 1 get added') 
   
    dependencies {

		logger.lifecycle('Adding forge gradle dependency from forge repo...') 
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		logger.lifecycle('...Forge gradle dependency Added!') 
    }

	logger.lifecycle('--------------------------') 
	logger.lifecycle('Buildscript DONE!') 
	logger.lifecycle('--------------------------') 

}

//compileJava needs Java-library, which is bees.
logger.lifecycle('Applying Java Plugin...') 
apply plugin: 'java'
logger.lifecycle('...Java Plugin applied!') 

//Next we need to set the source compat because newer gradle, java, etc. 
logger.lifecycle('Setting source compat flags...') 
sourceCompatibility = 1.7
targetCompatibility = 1.7
logger.lifecycle('...Source compat flags set!') 

//and then do the same thing at compilation level because I don't trust it.
compileJava {

	logger.lifecycle('Setting source compat flags in compileJava...') 
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	logger.lifecycle('...CompileJava compat flags set!') 

}

//other plugins
logger.lifecycle('Enabling forge and curseforge plugins...') 
apply plugin: 'forge'
apply plugin: 'curseforge'
logger.lifecycle('...plugins enabled!') 

//this was an old compat attempt, leaving here for reference in case I need it later. 
//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.6'

logger.lifecycle('---------------------------------------') 
logger.lifecycle('Starting allprojects section...') 
logger.lifecycle('---------------------------------------')

//this is an app-level section I added out of more paranoia
allprojects {
	
	//re-applies java plugin
	logger.lifecycle('Applying java plugin again...') 
	apply plugin: 'java'
	logger.lifecycle('...Java plugin applied again.')

	//re-applies java plugins by ensuring compilation time stuff is actually set.
	logger.lifecycle('Setting compat flags in here too...')  
	tasks.withType(JavaCompile) {
		
		logger.lifecycle('...attempting to set...') 
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
	
	}
	
	logger.lifecycle('...flags have been set, again.') 

	//this has a fix to swap some https things to http for compat
	logger.lifecycle('Fixing weird ssl things...') 
    repositories {
        all { 
			
			ArtifactRepository repo ->
            if (repo instanceof MavenArtifactRepository){
                if (repo.url.toString().startsWith("http://repo1.maven.org/maven2")) {
                    repo.url = repo.url.toString().replace("http://", "https://")
                
				}
            }
        }
		
		logger.lifecycle('....weird SSl things fixed.') 
    }
}

logger.lifecycle('...AllProjects section DONE.')


//Local repo for codechicken, NEI and baubles
//I made this a local dependency repository because I hate maven and trying to figure it out took too much time.
logger.lifecycle('---------------------------------------')
logger.lifecycle('APP-Level Repos')
logger.lifecycle('---------------------------------------') 

repositories {
	
	logger.lifecycle('Adding internal directory repository...')
	flatDir {

        dirs 'dependencies'
    
	}
	logger.lifecycle('...Done internal repo.')
	
	//mavenCentral()
	//Due to support changes, mavencentral no longer works. We can use the full URL instead. 
	//not great safety wise, but this is for a private server. fuck it. 
	//Note: This used to be below the Minecraft section. If this breaks, move it back.
	logger.lifecycle('Adding app-level maven...')
	maven {

		name = "mavenCentral"
		url = "http://insecure.repo1.maven.org/maven2/"
	
	}
	logger.lifecycle('...APP-Level maven done.')

}
logger.lifecycle('...all local repos added.')

logger.lifecycle('---------------------------------------') 
logger.lifecycle('App-level setup') 
logger.lifecycle('---------------------------------------') 

//parse config files
logger.lifecycle('Starting Config parsing...') 
ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)
ext.priv = parseConfig(file('private.properties'))

version = "${config.version}-${config.build_number}"
group = "vazkii.botania" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name
logger.lifecycle('...Config parsing DONE.')


logger.lifecycle('Minecraft config starting...')
minecraft {
    
	version = "${config.mc_version}-${config.forge_version}"
    assetDir = "eclipse/assets"

    //This, does the token replacement.
    //Though, I reccomend this to be replaced with a token such as @VERSION@
    
    replace 'GRADLE:BUILD', config.build_number
    replace 'GRADLE:VERSION', config.version

    replaceIn 'LibMisc.java' //I may have missed another file, though I can only find it in here.

}
logger.lifecycle('...Minecraft Config done.')

logger.lifecycle('configuring ant...')
configurations {

    sshAntTask

}
logger.lifecycle('...ant configured')

logger.lifecycle('---------------------------------------') 
logger.lifecycle('App level Dependencies') 
logger.lifecycle('---------------------------------------') 
//codechicken and baubles dependencies
dependencies {
	
	//names swapped to local dependency names. These are now stored in the "dependencies" folder in the project files
	
	logger.lifecycle('Starting to compile baubles, codechicken, nei, fmp')
	//compile files('Baubles-deobf.jar')
	compile ":Baubles-deobf"
	logger.lifecycle('baubles done')
	compile ":CodeChickenLib"
	logger.lifecycle('CCL done')
    compile ":CodeChickenCore"
	logger.lifecycle('CCC done')
    compile ":NotEnoughItems"
	logger.lifecycle('NEI done')
    compile ":ForgeMultipart"
	logger.lifecycle('FMP done')

    //and a bit more for SCP
    sshAntTask "org.apache.ant:ant-jsch:1.7.1", "jsch:jsch:0.1.29"
}

logger.lifecycle('DONE APP-level dependencies') 

logger.lifecycle('---------------------------------------') 
logger.lifecycle('Resource Processing') 
logger.lifecycle('---------------------------------------') 

processResources {
    // replace stuff in mcmod.info, nothing else
	logger.lifecycle('Process mcmod...') 
    from(sourceSets.main.resources.srcDirs) {
        	
		include 'mcmod.info'
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    
	}
	logger.lifecycle('...mcmod done') 

    // copy everything else, thats not the mcmod.info
	logger.lifecycle('copy everything else to srcDirs...') 
    from(sourceSets.main.resources.srcDirs) {    	
		
		exclude 'mcmod.info', '**/psd/**'
   
    }
	logger.lifecycle('...copy complete.') 
}

/**
* These, go outside of the processResources {}* Though, this was added with the NEI intergation commit (8bf4680)
*/

logger.lifecycle('---------------------------------------') 
logger.lifecycle('Additional Tasks') 
logger.lifecycle('---------------------------------------') 

//deobfuscator
logger.lifecycle('Jar deobfuscator start...') 
task deobfJar(type: Jar) {
    	
	from(sourceSets.main.output)
	archiveName = "${baseName} ${version}-deobf.${extension}"

}
logger.lifecycle('...jar deobfuscator done') 


//artifacts for deob
logger.lifecycle('Archive deobfuscated artifacts...') 
artifacts {
    	
	archives deobfJar

}
logger.lifecycle('... archive deobf stuff done') 


/**
* Increments the buildnumber in your config file, and saves it
*/

logger.lifecycle('Incrementing build number...') 
task incrementBuildNumber(dependsOn: 'reobf') << {
    	
	config.build_number = (config.build_number.toString().toInteger()) + 1
    configFile.withWriter {

		config.toProperties().store(it, "")
    	
	}
	
    file('web/versions.ini').append("\n${version}=${minecraft.version}")
    file("${config.dir_repo}/version/${minecraft.version}.txt").write("${version}")

}

// I have no idea what I'm doing
//Me either, Vazkii.

logger.lifecycle('Starting vazkiis weird gradle task section...') 

task wtfGradle2(type: Copy) {
   	
	from(jar.destinationDir)
    into file("${config.dir_output}/wtf")
}

// Seriously, I'm desperate to make this work
task wtfGradle1(type: Delete) {
	dependsOn "wtfGradle2"
    	delete "${config.dir_output}/wtf/${deobfJar.archiveName}"
}

task output(type: Copy) {
	
	dependsOn "wtfGradle1"
	from(jar.destinationDir)
    	into file(config.dir_output)
}

task outputDeobf(type: Copy) {
	
	dependsOn "output"
	from(config.dir_output) {
		
		include deobfJar.archiveName
	}
    	into file("${config.dir_output}/deobf")
}

task forgecraft(type: Copy) {
	
	dependsOn "outputDeobf"
	from "${config.dir_output}/wtf"
	into file(priv.dir_forgecraft)
}

task sort(type: Delete) {
	
	dependsOn "forgecraft"
	delete "${config.dir_output}/${deobfJar.archiveName}", "${config.dir_output}/wtf"
}

logger.lifecycle('...vazkiis weird gradle task section done, lol.') 


/**
* This is the upload task from the build.xml
*/

logger.lifecycle('Starting Upload task...') 
task upload() << {
    
	logger.lifecycle('task for /files...') 
	scp('/files') {
        	
		fileset(file: jar.archivePath)
    }
	logger.lifecycle('...done') 

	logger.lifecycle('task for /files/deobf...') 
	scp('/files/deobf') {
	
    	fileset(file: deobfJar.archivePath)
    }
	logger.lifecycle('...done') 

	logger.lifecycle('task for / ...') 
    scp('/') {
        	
		fileset(file: 'web/changelog.txt')
        fileset(file: 'web/versions.ini')
    }
	logger.lifecycle('...done') 

}
logger.lifecycle('...upload task done.') 


/**
 * This is deploy_web task
 */

logger.lifecycle('Start deploy web task...') 
task deployWeb << {
    	
	scp('/') {
        	
		fileset(dir: 'web') //everything from the web directory
    }
}
logger.lifecycle('...done') 

logger.lifecycle('---------------------------------------') 
logger.lifecycle('DEFs BEGIN') 
logger.lifecycle('---------------------------------------') 

logger.lifecycle('defining SCP...') 
def scp(String dir, Closure antFileset = {}) {
    	
	ant {
        	
		taskdef(
        	name: 'scp',
            	classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            	classpath: configurations.sshAntTask.asPath)

        String dirstr = priv.scp_dir + dir
        Map scpArgs = [
           	todir  : dirstr,
           	password  : priv.scp_pass,
		    sftp: true,
           	trust: 'yes'
        ]

        delegate.scp(scpArgs) {
            		
			antFileset.delegate = delegate
            		antFileset()
        
		}
    }
}
logger.lifecycle('...done defining SCP.') 

logger.lifecycle('defining parseConfig...') 
def parseConfig(File config) {
    	
	config.withReader {
        	
		def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    
	}
}
logger.lifecycle('...done defining parseConfig') 


logger.lifecycle('---------------------------------------') 
logger.lifecycle('Final Task section') 
logger.lifecycle('---------------------------------------') 

logger.lifecycle('Starting jar task...') 
jar {
    	
	//rename the default output, for some better... sanity with scipts
   	 archiveName = "${baseName} ${version}.${extension}"
}
logger.lifecycle('...jar task done') 

logger.lifecycle('starting curse task...') 
curse {
    	
	apiKey = priv.cfkey
    	projectId = "225643"
    	changelog = """See http://botaniamod.net/changelog.php#${version}"""
    	releaseType = "release"
    	relatedProject 'baubles': 'requiredLibrary'
}
logger.lifecycle('...curse task done') 

logger.lifecycle('Setting default tasks...') 

defaultTasks 'clean', 'build', 'sort', 'forgecraft', 'incrementBuildNumber', 'curse', 'upload'

logger.lifecycle('...default tasks set')

logger.lifecycle('---------------------------------------') 
logger.lifecycle('Build.gradle EOF! YAY.') 
logger.lifecycle('---------------------------------------') 

